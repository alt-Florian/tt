build-test:
  image: docker:stable
  stage: deploy
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --build-arg URL_BACK=$URL_TEST -t $CI_REGISTRY_IMAGE:$TAG_TEST .
    - docker push $CI_REGISTRY_IMAGE:$TAG_TEST
  rules:
    - when: manual

build-staging:
  image: docker:stable
  stage: deploy
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --build-arg URL_BACK=$URL_STAGING -t $CI_REGISTRY_IMAGE:$TAG_STAGING .
    - docker push $CI_REGISTRY_IMAGE:$TAG_STAGING    
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME=="develop" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "staging"
      when: manual

build-prod:
  image: docker:stable
  stage: deploy
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --build-arg URL_BACK=$URL_PROD -t $CI_REGISTRY_IMAGE:$TAG_PROD .    
    - docker push $CI_REGISTRY_IMAGE:$TAG_PROD
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME=="staging" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      when: manual


  